// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: api/api.proto

package api

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Tic service

func NewTicEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Tic service

type TicService interface {
	Shout(ctx context.Context, in *Bounce, opts ...client.CallOption) (*Bounce, error)
}

type ticService struct {
	c    client.Client
	name string
}

func NewTicService(name string, c client.Client) TicService {
	return &ticService{
		c:    c,
		name: name,
	}
}

func (c *ticService) Shout(ctx context.Context, in *Bounce, opts ...client.CallOption) (*Bounce, error) {
	req := c.c.NewRequest(c.name, "Tic.Shout", in)
	out := new(Bounce)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Tic service

type TicHandler interface {
	Shout(context.Context, *Bounce, *Bounce) error
}

func RegisterTicHandler(s server.Server, hdlr TicHandler, opts ...server.HandlerOption) error {
	type tic interface {
		Shout(ctx context.Context, in *Bounce, out *Bounce) error
	}
	type Tic struct {
		tic
	}
	h := &ticHandler{hdlr}
	return s.Handle(s.NewHandler(&Tic{h}, opts...))
}

type ticHandler struct {
	TicHandler
}

func (h *ticHandler) Shout(ctx context.Context, in *Bounce, out *Bounce) error {
	return h.TicHandler.Shout(ctx, in, out)
}

// Api Endpoints for Toc service

func NewTocEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Toc service

type TocService interface {
	Shout(ctx context.Context, in *Bounce, opts ...client.CallOption) (*Bounce, error)
}

type tocService struct {
	c    client.Client
	name string
}

func NewTocService(name string, c client.Client) TocService {
	return &tocService{
		c:    c,
		name: name,
	}
}

func (c *tocService) Shout(ctx context.Context, in *Bounce, opts ...client.CallOption) (*Bounce, error) {
	req := c.c.NewRequest(c.name, "Toc.Shout", in)
	out := new(Bounce)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Toc service

type TocHandler interface {
	Shout(context.Context, *Bounce, *Bounce) error
}

func RegisterTocHandler(s server.Server, hdlr TocHandler, opts ...server.HandlerOption) error {
	type toc interface {
		Shout(ctx context.Context, in *Bounce, out *Bounce) error
	}
	type Toc struct {
		toc
	}
	h := &tocHandler{hdlr}
	return s.Handle(s.NewHandler(&Toc{h}, opts...))
}

type tocHandler struct {
	TocHandler
}

func (h *tocHandler) Shout(ctx context.Context, in *Bounce, out *Bounce) error {
	return h.TocHandler.Shout(ctx, in, out)
}
